/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.AddPatientRequest
import org.openapitools.client.models.CreateObjective200Response
import org.openapitools.client.models.CreateObjectiveRequest
import org.openapitools.client.models.GetObjectives200Response
import org.openapitools.client.models.GetPatients200Response
import org.openapitools.client.models.Patient
import org.openapitools.client.models.RecordObjectiveMetricRequest

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class PatientsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Creates a new patient
     * 
     * @param addPatientRequest  (optional)
     * @return Patient
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addPatient(addPatientRequest: AddPatientRequest? = null) : Patient {
        val localVarResponse = addPatientWithHttpInfo(addPatientRequest = addPatientRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Patient
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Creates a new patient
     * 
     * @param addPatientRequest  (optional)
     * @return ApiResponse<Patient?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addPatientWithHttpInfo(addPatientRequest: AddPatientRequest?) : ApiResponse<Patient?> {
        val localVariableConfig = addPatientRequestConfig(addPatientRequest = addPatientRequest)

        return request<AddPatientRequest, Patient>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addPatient
     *
     * @param addPatientRequest  (optional)
     * @return RequestConfig
     */
    fun addPatientRequestConfig(addPatientRequest: AddPatientRequest?) : RequestConfig<AddPatientRequest> {
        val localVariableBody = addPatientRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/patients",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Creates a new objective for the patient
     * 
     * @param patientId 
     * @param createObjectiveRequest  (optional)
     * @return CreateObjective200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createObjective(patientId: java.math.BigDecimal, createObjectiveRequest: CreateObjectiveRequest? = null) : CreateObjective200Response {
        val localVarResponse = createObjectiveWithHttpInfo(patientId = patientId, createObjectiveRequest = createObjectiveRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreateObjective200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Creates a new objective for the patient
     * 
     * @param patientId 
     * @param createObjectiveRequest  (optional)
     * @return ApiResponse<CreateObjective200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createObjectiveWithHttpInfo(patientId: java.math.BigDecimal, createObjectiveRequest: CreateObjectiveRequest?) : ApiResponse<CreateObjective200Response?> {
        val localVariableConfig = createObjectiveRequestConfig(patientId = patientId, createObjectiveRequest = createObjectiveRequest)

        return request<CreateObjectiveRequest, CreateObjective200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createObjective
     *
     * @param patientId 
     * @param createObjectiveRequest  (optional)
     * @return RequestConfig
     */
    fun createObjectiveRequestConfig(patientId: java.math.BigDecimal, createObjectiveRequest: CreateObjectiveRequest?) : RequestConfig<CreateObjectiveRequest> {
        val localVariableBody = createObjectiveRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/patients/{patientId}/objectives".replace("{"+"patientId"+"}", encodeURIComponent(patientId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Retrieves a patient&#39;s particular objective
     * 
     * @param patientId 
     * @param objectiveId 
     * @return CreateObjective200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getObjective(patientId: java.math.BigDecimal, objectiveId: java.math.BigDecimal) : CreateObjective200Response {
        val localVarResponse = getObjectiveWithHttpInfo(patientId = patientId, objectiveId = objectiveId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreateObjective200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves a patient&#39;s particular objective
     * 
     * @param patientId 
     * @param objectiveId 
     * @return ApiResponse<CreateObjective200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getObjectiveWithHttpInfo(patientId: java.math.BigDecimal, objectiveId: java.math.BigDecimal) : ApiResponse<CreateObjective200Response?> {
        val localVariableConfig = getObjectiveRequestConfig(patientId = patientId, objectiveId = objectiveId)

        return request<Unit, CreateObjective200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getObjective
     *
     * @param patientId 
     * @param objectiveId 
     * @return RequestConfig
     */
    fun getObjectiveRequestConfig(patientId: java.math.BigDecimal, objectiveId: java.math.BigDecimal) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/patients/{patientId}/objectives/{objectiveId}".replace("{"+"patientId"+"}", encodeURIComponent(patientId.toString())).replace("{"+"objectiveId"+"}", encodeURIComponent(objectiveId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Retrieves a list of all the patient&#39;s current objectives
     * 
     * @param patientId 
     * @return GetObjectives200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getObjectives(patientId: java.math.BigDecimal) : GetObjectives200Response {
        val localVarResponse = getObjectivesWithHttpInfo(patientId = patientId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetObjectives200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves a list of all the patient&#39;s current objectives
     * 
     * @param patientId 
     * @return ApiResponse<GetObjectives200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getObjectivesWithHttpInfo(patientId: java.math.BigDecimal) : ApiResponse<GetObjectives200Response?> {
        val localVariableConfig = getObjectivesRequestConfig(patientId = patientId)

        return request<Unit, GetObjectives200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getObjectives
     *
     * @param patientId 
     * @return RequestConfig
     */
    fun getObjectivesRequestConfig(patientId: java.math.BigDecimal) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/patients/{patientId}/objectives".replace("{"+"patientId"+"}", encodeURIComponent(patientId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Returns a list of patients, ordered by surname, then first name
     * 
     * @return GetPatients200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getPatients() : GetPatients200Response {
        val localVarResponse = getPatientsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetPatients200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Returns a list of patients, ordered by surname, then first name
     * 
     * @return ApiResponse<GetPatients200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getPatientsWithHttpInfo() : ApiResponse<GetPatients200Response?> {
        val localVariableConfig = getPatientsRequestConfig()

        return request<Unit, GetPatients200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getPatients
     *
     * @return RequestConfig
     */
    fun getPatientsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/patients",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Records a new count for the patient&#39;s objective
     * 
     * @param patientId 
     * @param objectiveId 
     * @param recordObjectiveMetricRequest  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun recordObjectiveMetric(patientId: java.math.BigDecimal, objectiveId: java.math.BigDecimal, recordObjectiveMetricRequest: RecordObjectiveMetricRequest? = null) : Unit {
        val localVarResponse = recordObjectiveMetricWithHttpInfo(patientId = patientId, objectiveId = objectiveId, recordObjectiveMetricRequest = recordObjectiveMetricRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Records a new count for the patient&#39;s objective
     * 
     * @param patientId 
     * @param objectiveId 
     * @param recordObjectiveMetricRequest  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun recordObjectiveMetricWithHttpInfo(patientId: java.math.BigDecimal, objectiveId: java.math.BigDecimal, recordObjectiveMetricRequest: RecordObjectiveMetricRequest?) : ApiResponse<Unit?> {
        val localVariableConfig = recordObjectiveMetricRequestConfig(patientId = patientId, objectiveId = objectiveId, recordObjectiveMetricRequest = recordObjectiveMetricRequest)

        return request<RecordObjectiveMetricRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation recordObjectiveMetric
     *
     * @param patientId 
     * @param objectiveId 
     * @param recordObjectiveMetricRequest  (optional)
     * @return RequestConfig
     */
    fun recordObjectiveMetricRequestConfig(patientId: java.math.BigDecimal, objectiveId: java.math.BigDecimal, recordObjectiveMetricRequest: RecordObjectiveMetricRequest?) : RequestConfig<RecordObjectiveMetricRequest> {
        val localVariableBody = recordObjectiveMetricRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/patients/{patientId}/objectives/{objectiveId}/record".replace("{"+"patientId"+"}", encodeURIComponent(patientId.toString())).replace("{"+"objectiveId"+"}", encodeURIComponent(objectiveId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
